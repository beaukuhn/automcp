import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";
<% /* Dynamically generate tool registrations based on YAML definitions */ %>
<% Object.keys(tools).forEach(toolName => { %>
import { handle<%= toolName.charAt(0).toUpperCase() + toolName.slice(1) %> } from "../../src/custom/<%= service.name.toLowerCase() %>/<%= toolName %>Handlers.js";
<% }); %>

// Create the MCP server
const server = new McpServer({ name: "<%= service.name %>", version: "<%= service.version %>" });

<% Object.keys(tools).forEach(toolName => { %>
// Register the <%= toolName %> tool
server.tool(
  "<%= toolName %>", 
  {
    <% Object.keys(tools[toolName].parameters).forEach(param => { %>
    <%= param %>: z.<%= tools[toolName].parameters[param].type.toLowerCase() %>(), 
    <% }); %>
  },
  async (args) => {
    // Call the handler function
    return handle<%= toolName.charAt(0).toUpperCase() + toolName.slice(1) %>(args);
  }
);
<% }); %>

// Set up the transport and start the MCP server
const transport = new StdioServerTransport();
server.connect(transport).then(() => {
  console.log("MCP Server is running.");
});